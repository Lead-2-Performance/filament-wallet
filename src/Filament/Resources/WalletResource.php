<?php

namespace TomatoPHP\FilamentWallet\Filament\Resources;

use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Get;
use Filament\Forms\Set;
use TomatoPHP\FilamentWallet\Filament\Resources\WalletResource\Pages;
use TomatoPHP\FilamentWallet\Filament\Resources\WalletResource\RelationManagers;
use TomatoPHP\FilamentWallet\Models\Wallet;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class WalletResource extends Resource
{
    protected static ?string $model = Wallet::class;

    protected static ?string $navigationIcon = 'heroicon-o-wallet';

    protected static ?int $navigationSort = 1;

    public static function getNavigationGroup(): ?string
    {
        return "Wallet"; // TODO: Change the autogenerated stub
    }

    public static function getNavigationLabel(): string
    {
        return "Wallets"; // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form->schema([
                TextInput::make('balance')
                    ->columnSpan(2)
                    ->disabled()
                    ->label('Current balance')
                    ->numeric()
                    ->live()
                    ->required(),
                Select::make('type')
                    ->columnSpan(2)
                    ->searchable()
                    ->default('credit')
                    ->options([
                        'credit' => 'Credit',
                        'debit' => 'Debit'
                    ])
                    ->label('Type')
                    ->required()
                    ->live(),
                TextInput::make('amount')
                    ->columnSpan(2)
                    ->label('Amount')
                    ->numeric()
                    ->required()
                    ->live()
                    ->afterStateUpdated(function($record, $state, Set $set, Get $get){
                        if($get('type') == 'debit'){
                            $set('balance', $record->balance - $state);
                        }
                        else {
                            $set('balance', $record->balance + $state);
                        }
                    })
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->defaultSort('created_at', 'desc')
            ->columns([
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('holder.name')
                    ->label('Account')
                    ->searchable(),
                Tables\Columns\TextColumn::make('name')
                    ->searchable(),
                Tables\Columns\TextColumn::make('balance')
                    ->badge()
                    ->numeric(2)
                    ->sortable(),
                Tables\Columns\TextColumn::make('uuid')
                    ->label('UUID')
                    ->searchable(),

                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('holder_id')
                    ->label('Filter By Account')
                    ->searchable()
                    ->options(fn () => config('filament-accounts.model')::query()->pluck('name', 'id')->toArray())
            ])
            ->actions([
                Tables\Actions\Action::make('wallet')
                    ->iconButton()
                    ->icon('heroicon-s-wallet')
                    ->tooltip('Charge Wallet')
                    ->form(function ($record){
                        return [
                            TextInput::make('balance')
                                ->disabled()
                                ->label('Current balance')
                                ->numeric()
                                ->required()
                                ->live()
                                ->default($record->balance),
                            Select::make('type')
                                ->searchable()
                                ->default('credit')
                                ->options([
                                    'credit' => 'Credit',
                                    'debit' => 'Debit'
                                ])
                                ->label('Type')
                                ->required()
                                ->live(),
                            TextInput::make('amount')
                                ->label('Amount')
                                ->numeric()
                                ->required()
                                ->live()
                                ->afterStateUpdated(function($record, $state, Set $set, Get $get){
                                    if($get('type') == 'debit'){
                                        $set('balance', $record->balance - $state);
                                    }
                                    else {
                                        $set('balance', $record->balance + $state);
                                    }
                                })
                        ];
                    })
                    ->action(function($record,array $data){
                        if($data['type'] == 'debit'){
                            $record->withdraw($data['amount']);
                        }
                        else {
                            $record->deposit($data['amount']);
                        }
                    }),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListWallets::route('/'),
        ];
    }
}
