<?php

namespace TomatoPHP\FilamentWallet\Filament\Resources;

use TomatoPHP\FilamentWallet\Filament\Resources\TransactionResource\Pages;
use TomatoPHP\FilamentWallet\Filament\Resources\TransactionResource\RelationManagers;
use TomatoPHP\FilamentWallet\Models\Transaction;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class TransactionResource extends Resource
{
    protected static ?string $model = Transaction::class;

    protected static ?string $navigationIcon = 'heroicon-o-banknotes';

    protected static ?int $navigationSort = 3;


    public static function getNavigationGroup(): ?string
    {
        return "Wallet"; // TODO: Change the autogenerated stub
    }

    public static function getNavigationLabel(): string
    {
        return "Transactions"; // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('payable_type')
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('payable_id')
                    ->required()
                    ->numeric(),
                Forms\Components\Select::make('wallet_id')
                    ->relationship('wallet', 'name')
                    ->required(),
                Forms\Components\TextInput::make('type')
                    ->required(),
                Forms\Components\TextInput::make('amount')
                    ->required()
                    ->numeric(),
                Forms\Components\Toggle::make('confirmed')
                    ->required(),
                Forms\Components\TextInput::make('meta'),
                Forms\Components\TextInput::make('uuid')
                    ->label('UUID')
                    ->required()
                    ->maxLength(36),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->defaultSort('created_at', 'desc')
            ->columns([
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('payable.name')
                    ->label('Account')
                    ->searchable(),
                Tables\Columns\TextColumn::make('wallet.name')
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('type')
                    ->badge()
                    ->color(fn (Transaction $transaction) => $transaction->type === 'deposit' ? 'success' : 'danger'),
                Tables\Columns\TextColumn::make('amount')
                    ->numeric(2)
                    ->badge()
                    ->color(fn (Transaction $transaction) => $transaction->amount > 0 ? 'success' : 'danger')
                    ->sortable(),
                Tables\Columns\IconColumn::make('confirmed')
                    ->boolean(),
                Tables\Columns\TextColumn::make('uuid')
                    ->label('UUID')
                    ->searchable(),

                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
               Tables\Filters\SelectFilter::make('payable_id')
                    ->label('Filter By Account')
                    ->searchable()
                    ->options(fn () => config('filament-accounts.model')::query()->pluck('name', 'id')->toArray())
            ])
            ->actions([
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTransactions::route('/'),
        ];
    }
}
